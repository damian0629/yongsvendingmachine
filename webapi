using System;
using System.Diagnostics;
using System.Net.Http;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

class Program
{
    static async Task Main(string[] args)
    {
        int product1 = 5;
        int product2 = 6;
        int product3 = 7;
        int qty = 0;

        // Menu  
        Console.WriteLine("**********YONG's Vending Machine**********");
        Console.WriteLine("");
        Console.WriteLine("1) MILO (RM5)");
        Console.WriteLine("2) COKE (RM6)");
        Console.WriteLine("3) NESCAFE (RM7)");
        Console.WriteLine("");
        Console.WriteLine("PLEASE CHOOSE YOUR DRINK (1/2/3):");
        string choice = Console.ReadLine();

        switch (choice)
        {
            case "1":
                Console.WriteLine("Quantity:");
                qty = int.Parse(Console.ReadLine());
                Console.WriteLine("Total is RM" + (product1 * qty));
                break;
            case "2":
                Console.WriteLine("Quantity:");
                qty = int.Parse(Console.ReadLine());
                Console.WriteLine("Total is RM" + (product2 * qty));
                break;
            case "3":
                Console.WriteLine("Quantity:");
                qty = int.Parse(Console.ReadLine());
                Console.WriteLine("Total is RM" + (product3 * qty));
                break;
            default:
                Console.WriteLine("Invalid choice.");
                break;
        }

        decimal exchangeRate = await GetExchangeRateAsync("USD"); // Get exchange rate for USD
        decimal totalInUSD = (product1 * qty) * exchangeRate;

        Console.WriteLine("Total in USD is: $" + totalInUSD);

        bool redirectToOnlineBanking = false;

        while (!redirectToOnlineBanking)
        {
            Console.WriteLine("Please pay by online banking");
            Console.WriteLine("Please press 'y' to redirect");
            string redirectChoice = Console.ReadLine();

            if (redirectChoice == "y")
            {
                Console.WriteLine("Redirecting...");
                OpenUrlInDefaultBrowser("http://www.google.com");
                redirectToOnlineBanking = true;
            }
            else
            {
                Console.WriteLine("Invalid choice, please try again.");
            }
        }
    }

    static async Task<decimal> GetExchangeRateAsync(string targetCurrency)
    {
        using (HttpClient client = new HttpClient())
        {
            string apiKey = "API_KEY"; 
            string apiUrl = $"https://demo4.jimlimxy.site/index.php?endpoint=license&id=1";

            client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

            try
            {
                HttpResponseMessage response = await client.GetAsync(apiUrl);

                if (response.IsSuccessStatusCode)
                {
                    string responseBody = await response.Content.ReadAsStringAsync();
                    decimal exchangeRate = ParseExchangeRateFromJson(responseBody, targetCurrency);
                    return exchangeRate;
                }
                else
                {
                    Console.WriteLine("Error retrieving exchange rate.");
                    return 0;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("An error occurred while fetching exchange rate: " + ex.Message);
                return 0;
            }
        }
    }

    static decimal ParseExchangeRateFromJson(string jsonResponse, string targetCurrency)
    {
        return 0.21m; // Example exchange rate
    }

    static void OpenUrlInDefaultBrowser(string url)
    {
        try
        {
            
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                Process.Start(new ProcessStartInfo
                {
                    FileName = url,
                    UseShellExecute = true
                });
            }
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
            {
                Process.Start("open", url);
            }
            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            {
                Process.Start("xdg-open", url);
            }
            else
            {
                Console.WriteLine("Unsupported platform.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred while opening the URL: " + ex.Message);
        }
    }
}
